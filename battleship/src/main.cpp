#include <iostream>
#include <cstdlib>      // rand, srand
#include <ctime>        // time
#include <sstream>      // std::istringstream
#include "../include/Game.h"

Orientation randomOrientation() {
    return rand() % 2 == 0 ? Orientation::Horizontal : Orientation::Vertical;
}

std::pair<int, int> randomPosition(int maxX, int maxY) {
    int x = rand() % maxX;
    int y = rand() % maxY;
    return {x, y};
}

// üö¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
void autoPlaceFleet(Board& board) {
    std::vector<std::pair<std::string, int>> fleet = {
        {"Battleship", 4},
        {"Cruiser1", 3}, {"Cruiser2", 3},
        {"Destroyer1", 2}, {"Destroyer2", 2}, {"Destroyer3", 2}
    };

    for (auto& [name, size] : fleet) {
        bool placed = false;
        while (!placed) {
            auto start = randomPosition(BOARD_SIZE, BOARD_SIZE);
            Orientation dir = randomOrientation();
            Ship ship(name, size, start, dir);
            placed = board.placeShip(ship);
        }
    }
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));

    Game game("Player1", "Player2");

    autoPlaceFleet(game.getBoard(0));  // –ò–≥—Ä–æ–∫ 1
    autoPlaceFleet(game.getBoard(1));  // –ò–≥—Ä–æ–∫ 2

    std::cout << "‚öì –§–ª–æ—Ç —Ä–∞–∑–º–µ—â—ë–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.\n";

    // üîÅ –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while (!game.isGameOver()) {
        std::cout << "\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞: " << game.getCurrentPlayerName() << "\n";
        game.printCurrentBoard();

        int x, y;

        // üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        while (true) {
            std::cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–∞ (x y): ";

            std::string input;
            std::getline(std::cin, input);

            std::istringstream iss(input);
            if (!(iss >> x >> y)) {
                std::cout << "Error: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n";
                continue;
            }

            if (x < 0 || x >= BOARD_SIZE || y < 0 || y >= BOARD_SIZE) {
                std::cout << "Error: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –ø–æ–ª—è. –î–∏–∞–ø–∞–∑–æ–Ω ‚Äî –æ—Ç 0 –¥–æ 9.\n";
                continue;
            }

            break; // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        }

        game.playerTurn(x, y);
    }

    std::cout << "\nüèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
    return 0;
}
