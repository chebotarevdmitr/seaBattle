#include "../include/Board.h"
#include <iostream>
#include <set>         // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
#include <algorithm>   // –î–ª—è std::all_of

Board::Board() {
    // ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤—Å—ë –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ '.'
    for (int y = 0; y < BOARD_SIZE; ++y)
        for (int x = 0; x < BOARD_SIZE; ++x)
            grid[y][x] = '.';
}

bool Board::placeShip(const Ship& ship) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if (doesOverlap(ship))
        return false;

    for (const auto& [x, y] : ship.getCoordinates()) {
        if (!isValidPosition(x, y))
            return false;
        grid[y][x] = 'S'; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ 'S', –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫—É
    }

    ships.push_back(ship);
    return true;
}

bool Board::fireAt(int x, int y) {
    if (!isValidPosition(x, y))
        return false;

    for (auto& ship : ships) {
        if (ship.hit(x, y)) {
            grid[y][x] = 'X'; // üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            return true;
        }
    }

    grid[y][x] = 'O'; // üí® –ü—Ä–æ–º–∞—Ö
    return false;
}

bool Board::allShipsSunk() const {
    return std::all_of(ships.begin(), ships.end(), [](const Ship& ship) {
        return ship.isSunk();
    });
}

const std::vector<Ship>& Board::getShips() const {
    return ships;
}

bool Board::doesOverlap(const Ship& newShip) const {
    for (const auto& coord : newShip.getCoordinates()) {
        int x = coord.first;
        int y = coord.second;
        if (!isValidPosition(x, y))
            return true;
        if (grid[y][x] == 'S')
            return true;
    }
    return false;
}

bool Board::isValidPosition(int x, int y) const {
    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
}

// üé® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å —Ä–∞–º–∫–∞–º–∏ –∏ –ª–µ–≥–µ–Ω–¥–æ–π
void Board::printBoardFramed() const {
    std::set<std::pair<int, int>> sunkCoords;
    for (const auto& ship : ships)
        if (ship.isSunk())
            for (const auto& coord : ship.getCoordinates())
                sunkCoords.insert(coord);

    // –í–µ—Ä—Ö–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    std::cout << "    ";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << x << "   ";
    std::cout << "\n";

    // –í–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞
    std::cout << "  ‚îå";
    for (int i = 0; i < BOARD_SIZE - 1; ++i)
        std::cout << "‚îÄ‚îÄ‚îÄ‚î¨";
    std::cout << "‚îÄ‚îÄ‚îÄ‚îê\n";

    for (int y = 0; y < BOARD_SIZE; ++y) {
        std::cout << " " << y << "‚îÇ";
        for (int x = 0; x < BOARD_SIZE; ++x) {
            std::pair<int, int> pos = {x, y};
            char cell = grid[y][x];
            char display = '.';

            // –í—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫—É
            if (sunkCoords.count(pos)) display = 'D';
            else if (cell == 'X') display = 'X';
            else if (cell == 'O') display = 'O';

            std::cout << " " << display << " ‚îÇ";
        }
        std::cout << "\n";

        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫
        if (y < BOARD_SIZE - 1) {
            std::cout << "  ‚îú";
            for (int i = 0; i < BOARD_SIZE - 1; ++i)
                std::cout << "‚îÄ‚îÄ‚îÄ‚îº";
            std::cout << "‚îÄ‚îÄ‚îÄ‚î§\n";
        } else {
            // –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞
            std::cout << "  ‚îî";
            for (int i = 0; i < BOARD_SIZE - 1; ++i)
                std::cout << "‚îÄ‚îÄ‚îÄ‚î¥";
            std::cout << "‚îÄ‚îÄ‚îÄ‚îò\n";
        }
    }

    // –õ–µ–≥–µ–Ω–¥–∞ —Å–∏–º–≤–æ–ª–æ–≤
    std::cout << "\nüó∫Ô∏è –õ–µ–≥–µ–Ω–¥–∞:\n";
    std::cout << "X ‚Äî –ø–æ–ø–∞–¥–∞–Ω–∏–µ\n";
    std::cout << "O ‚Äî –ø—Ä–æ–º–∞—Ö\n";
    std::cout << "D ‚Äî –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å\n";
    std::cout << ". ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å\n";
}

// üß≠ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ—Å–∫–∏ —Å –∫–æ—Ä–∞–±–ª—è–º–∏
void Board::printOwnBoardFramed() const {
    std::set<std::pair<int, int>> sunkCoords;
    for (const auto& ship : ships)
        if (ship.isSunk())
            for (const auto& coord : ship.getCoordinates())
                sunkCoords.insert(coord);

    std::cout << "    ";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << x << "   ";
    std::cout << "\n";

    std::cout << "  ‚îå";
    for (int i = 0; i < BOARD_SIZE - 1; ++i)
        std::cout << "‚îÄ‚îÄ‚îÄ‚î¨";
    std::cout << "‚îÄ‚îÄ‚îÄ‚îê\n";

    for (int y = 0; y < BOARD_SIZE; ++y) {
        std::cout << " " << y << "‚îÇ";
        for (int x = 0; x < BOARD_SIZE; ++x) {
            std::pair<int, int> pos = {x, y};
            char cell = grid[y][x];
            char display = '.';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏, –ø–æ–ø–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–º–∞—Ö–∏
            if (sunkCoords.count(pos)) display = 'D';
            else if (cell == 'X') display = 'X';
            else if (cell == 'O') display = 'O';
            else if (cell == 'S') display = 'S';

            std::cout << " " << display << " ‚îÇ";
        }
        std::cout << "\n";

        if (y < BOARD_SIZE - 1) {
            std::cout << "  ‚îú";
            for (int i = 0; i < BOARD_SIZE - 1; ++i)
                std::cout << "‚îÄ‚îÄ‚îÄ‚îº";
            std::cout << "‚îÄ‚îÄ‚îÄ‚î§\n";
        } else {
            std::cout << "  ‚îî";
            for (int i = 0; i < BOARD_SIZE - 1; ++i)
                std::cout << "‚îÄ‚îÄ‚îÄ‚î¥";
            std::cout << "‚îÄ‚îÄ‚îÄ‚îò\n";
        }
    }

    // –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è —Å–≤–æ–µ–π –¥–æ—Å–∫–∏
    std::cout << "\nüß≠ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å–∫–∞ ‚Äî –ª–µ–≥–µ–Ω–¥–∞:\n";
    std::cout << "S ‚Äî –∫–æ—Ä–∞–±–ª—å\n";
    std::cout << "X ‚Äî –ø–æ–ø–∞–¥–∞–Ω–∏–µ\n";
    std::cout << "D ‚Äî –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π\n";
    std::cout << "O ‚Äî –ø—Ä–æ–º–∞—Ö\n";
    std::cout << ". ‚Äî –ø—É—Å—Ç–æ\n";
}

