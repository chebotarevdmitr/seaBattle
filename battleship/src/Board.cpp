#include "../include/Board.h"
#include <iostream>
#include <set>         // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
#include <algorithm>   // –î–ª—è std::all_of

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
Board::Board() {
    // ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ '.'
    for (int y = 0; y < BOARD_SIZE; ++y)
        for (int x = 0; x < BOARD_SIZE; ++x)
            grid[y][x] = CELL_EMPTY;
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ
bool Board::placeShip(const Ship& ship) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–∞–±–ª—å —Å –¥—Ä—É–≥–∏–º–∏
    if (doesOverlap(ship))
        return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –∫–æ—Ä–∞–±–ª—è
    for (const auto& [x, y] : ship.getCoordinates()) {
        if (!isValidPosition(x, y))
            return false;
        grid[y][x] = CELL_SHIP; // –ö–æ—Ä–∞–±–ª—å –ø–æ–º–µ—á–∞–µ—Ç—Å—è 'S'
    }

    ships.push_back(ship);
    return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
bool Board::fireAt(int x, int y) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (!isValidPosition(x, y))
        return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∫–æ—Ä–∞–±–ª—è–º
    for (auto& ship : ships) {
        if (ship.hit(x, y)) {
            grid[y][x] = CELL_HIT; // üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            return true;
        }
    }

    grid[y][x] = CELL_MISS; // üí® –ü—Ä–æ–º–∞—Ö
    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã
bool Board::allShipsSunk() const {
    return std::all_of(ships.begin(), ships.end(), [](const Ship& ship) {
        return ship.isSunk();
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π
const std::vector<Ship>& Board::getShips() const {
    return ships;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π
bool Board::doesOverlap(const Ship& newShip) const {
    for (const auto& coord : newShip.getCoordinates()) {
        int x = coord.first;
        int y = coord.second;
        if (!isValidPosition(x, y))
            return true;
        if (grid[y][x] == CELL_SHIP) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            return true;
    }
    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
bool Board::isValidPosition(int x, int y) const {
    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
}

// üé® –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ —è—á–µ–π–∫–∏
void Board::printColoredCell(char cell, bool isPlayerBoard) const {
    switch(cell) {
        case CELL_SHIP: // –ö–æ—Ä–∞–±–ª—å
            if (isPlayerBoard) {
                std::cout << Color::GREEN << " S " << Color::RESET;
            } else {
                std::cout << Color::BLUE << " . " << Color::RESET; // –°–∫—Ä—ã—Ç–æ –¥–ª—è –≤—Ä–∞–≥–∞
            }
            break;
        case CELL_HIT: // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            std::cout << Color::RED << " X " << Color::RESET;
            break;
        case CELL_MISS: // –ü—Ä–æ–º–∞—Ö
            std::cout << Color::CYAN << " O " << Color::RESET;
            break;
        case CELL_SUNK: // –ü–æ—Ç–æ–ø–ª–µ–Ω
            std::cout << Color::MAGENTA << " D " << Color::RESET;
            break;
        default: // –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
            std::cout << Color::BLUE << " . " << Color::RESET;
    }
}

// üñ•Ô∏è –ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
void Board::printEnemyBoard() const {
    // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    std::cout << "    ";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << Color::WHITE << x << " " << Color::RESET;
    std::cout << "\n";

    // üîç –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
    std::set<std::pair<int, int>> sunkCoords;
    for (const auto& ship : ships) {
        if (ship.isSunk()) {
            for (const auto& coord : ship.getCoordinates()) {
                sunkCoords.insert(coord);
            }
        }
    }

    // –í—ã–≤–æ–¥–∏–º –¥–æ—Å–∫—É —Å —Ä–∞–º–∫–∞–º–∏
    std::cout << "  ‚îå";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << "‚îÄ‚îÄ‚îÄ";
    std::cout << "‚îÄ‚îê\n";

    for (int y = 0; y < BOARD_SIZE; ++y) {
        std::cout << Color::WHITE << y << Color::RESET << " ‚îÇ";
        for (int x = 0; x < BOARD_SIZE; ++x) {
            std::pair<int, int> pos = {x, y};
            char cell = grid[y][x];

            // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if (sunkCoords.count(pos)) {
                printColoredCell(CELL_SUNK);  // üõë –ü–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
            } else if (cell == CELL_HIT) {
                printColoredCell(CELL_HIT);   // üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            } else if (cell == CELL_MISS) {
                printColoredCell(CELL_MISS);  // üí® –ü—Ä–æ–º–∞—Ö
            } else {
                printColoredCell(CELL_EMPTY); // ü´• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
            }
        }
        std::cout << "‚îÇ\n";
    }
    
    std::cout << "  ‚îî";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << "‚îÄ‚îÄ‚îÄ";
    std::cout << "‚îÄ‚îò\n";
}

// üé® –ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–µ–π –¥–æ—Å–∫–∏ (—Å –≤–∏–¥–∏–º—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏)
void Board::printPlayerBoard() const {
    // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    std::cout << "    ";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << Color::WHITE << x << " " << Color::RESET;
    std::cout << "\n";

    // –í—ã–≤–æ–¥–∏–º –¥–æ—Å–∫—É —Å —Ä–∞–º–∫–∞–º–∏
    std::cout << "  ‚îå";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << "‚îÄ‚îÄ‚îÄ";
    std::cout << "‚îÄ‚îê\n";

    for (int y = 0; y < BOARD_SIZE; ++y) {
        std::cout << Color::WHITE << y << Color::RESET << " ‚îÇ";
        for (int x = 0; x < BOARD_SIZE; ++x) {
            char cell = grid[y][x];
            printColoredCell(cell, true); // true = —Å–≤–æ—è –¥–æ—Å–∫–∞
        }
        std::cout << "‚îÇ\n";
    }
    
    std::cout << "  ‚îî";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << "‚îÄ‚îÄ‚îÄ";
    std::cout << "‚îÄ‚îò\n";
}