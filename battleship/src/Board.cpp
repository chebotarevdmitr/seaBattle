#include "../include/Board.h"
#include <iostream>
#include <set>         // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
#include <algorithm>   // –î–ª—è std::all_of

Board::Board() {
    // ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∞–º–∏ '.'
    for (int y = 0; y < BOARD_SIZE; ++y)
        for (int x = 0; x < BOARD_SIZE; ++x)
            grid[y][x] = '.';
}

bool Board::placeShip(const Ship& ship) {
    if (doesOverlap(ship))
        return false;

    for (const auto& [x, y] : ship.getCoordinates()) {
        if (!isValidPosition(x, y))
            return false;
        grid[y][x] = 'S'; // –ö–æ—Ä–∞–±–ª—å –ø–æ–º–µ—á–∞–µ—Ç—Å—è 'S', –Ω–æ —Å–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    }

    ships.push_back(ship);
    return true;
}

bool Board::fireAt(int x, int y) {
    if (!isValidPosition(x, y))
        return false;

    for (auto& ship : ships) {
        if (ship.hit(x, y)) {
            grid[y][x] = 'X'; // üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            return true;
        }
    }

    grid[y][x] = 'O'; // üí® –ü—Ä–æ–º–∞—Ö
    return false;
}

bool Board::allShipsSunk() const {
    return std::all_of(ships.begin(), ships.end(), [](const Ship& ship) {
        return ship.isSunk();
    });
}

const std::vector<Ship>& Board::getShips() const {
    return ships;
}

bool Board::doesOverlap(const Ship& newShip) const {
    for (const auto& coord : newShip.getCoordinates()) {
        int x = coord.first;
        int y = coord.second;
        if (!isValidPosition(x, y))
            return true;
        if (grid[y][x] == 'S') // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            return true;
    }
    return false;
}

bool Board::isValidPosition(int x, int y) const {
    return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
}

// üñ•Ô∏è –ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ X, O, D –∏ . ‚Äî —Å–∫—Ä—ã—Ç–∞—è –ª–æ–≥–∏–∫–∞
void Board::printBoard() const {
    std::cout << "  ";
    for (int x = 0; x < BOARD_SIZE; ++x)
        std::cout << x << " ";
    std::cout << "\n";

    // üîç –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
    std::set<std::pair<int, int>> sunkCoords;
    for (const auto& ship : ships) {
        if (ship.isSunk()) {
            for (const auto& coord : ship.getCoordinates()) {
                sunkCoords.insert(coord);
            }
        }
    }

    for (int y = 0; y < BOARD_SIZE; ++y) {
        std::cout << y << " ";
        for (int x = 0; x < BOARD_SIZE; ++x) {
            std::pair<int, int> pos = {x, y};
            char cell = grid[y][x];

            // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if (sunkCoords.count(pos)) {
                std::cout << "D ";  // üõë –ü–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
            } else if (cell == 'X') {
                std::cout << "X ";  // üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            } else if (cell == 'O') {
                std::cout << "O ";  // üí® –ü—Ä–æ–º–∞—Ö
            } else {
                std::cout << ". ";  // ü´• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
            }
        }
        std::cout << "\n";
    }
}
